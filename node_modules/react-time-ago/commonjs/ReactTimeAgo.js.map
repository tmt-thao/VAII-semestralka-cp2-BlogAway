{"version":3,"file":"ReactTimeAgo.js","names":["ReactTimeAgo","dateProperty","date","future","timeStyle","round","minTimeLeft","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","nowProperty","now","timeOffset","polyfill","tooltip","component","Component","Time","container","wrapperComponent","wrapperProps","rest","useTimeAgo","verboseDate","formattedDate","result","WrapperComponent","propTypes","PropTypes","oneOfType","instanceOf","Date","number","isRequired","string","arrayOf","bool","styleType","elementType","func","object","shape","threshold","interval","React","memo"],"sources":["../source/ReactTimeAgo.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Time from './Time.js'\r\nimport useTimeAgo from './useTimeAgo.js'\r\n\r\nimport { style as styleType } from './PropTypes.js'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate: dateProperty,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\tlocale,\r\n\tlocales = [],\r\n\tformatVerboseDate,\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\tnow: nowProperty,\r\n\ttimeOffset,\r\n\tpolyfill,\r\n\r\n\t// React Component properties:\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip = true,\r\n\t// Use `<time/>` tag by default.\r\n\tcomponent: Component = Time,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\t...rest\r\n}) {\r\n\tconst {\r\n\t\tdate,\r\n\t\tverboseDate,\r\n\t\tformattedDate\r\n\t} = useTimeAgo({\r\n\t\tdate: dateProperty,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\tlocale,\r\n\t\tlocales,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormat,\r\n\t\tupdateInterval,\r\n\t\ttick,\r\n\t\tnow: nowProperty,\r\n\t\ttimeOffset,\r\n\t\tpolyfill\r\n\t});\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={verboseDate}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={verboseDate}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// `date: Date` or `timestamp: number`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string — Formatted verbose date.\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// When not provided, will use `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles to determine the update interval.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns auto-update off, so this parameter is deprecated.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// Allows setting a custom baseline for relative time measurement.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\tnow: PropTypes.number,\r\n\r\n\t// Allows offsetting the `date` by an arbitrary amount of milliseconds.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\ttimeOffset: PropTypes.number,\r\n\r\n\t// Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\r\n\t// instead of the polyfilled ones in `javascript-time-ago`.\r\n\tpolyfill: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.elementType,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo"],"mappings":"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"}